-- ESQUEMA RELACIONAL EXEMPLO
-- EMPREGADO (MATRICULA, NOME_EMPREGAGO, SALARIO, NUM_DEPTO)
-- DEPARTAMENTO (NUM_DEPTO, NOME_DEPTO)
-- PROJETO (NUM_PROJ, NOME_PROJETO, LUGAR)
-- TRABALHA (MAT_EMPREGADO, NUM_PROJ, HORAS)
-- DEPENDENTE (MATRICULA_EMPREG, NOME_DEPENDENTE, GRAU_PARENTESCO)
-- DROP TABLE DEPARTAMENTO;
-- DROP DATABASE SANKHYA;

CREATE TABLE IF NOT EXISTS DEPARTAMENTO(
	NUM_DEPTO SERIAL NOT NULL,
	NOME_DEPTO VARCHAR(60) NOT NULL,
	--CHAVE PRIMÁRIA
	CONSTRAINT DEPARTAMENTO_PK PRIMARY KEY(NUM_DEPTO)
);

CREATE TABLE IF NOT EXISTS EMPREGADO(
	MATRICULA SERIAL NOT NULL,
	NOME_EMPREGAGO VARCHAR(50) NOT NULL,
	SALARIO DECIMAL(10,2),
	NUM_DEPTO INT,
	--CHAVE PRIMÁRIA
	CONSTRAINT EMPREGADO_PK PRIMARY KEY (MATRICULA),
	--CHAVE ESTRANGEIRA
	CONSTRAINT EMPREG_DEPTO_FK FOREIGN KEY (NUM_DEPTO)
	REFERENCES DEPARTAMENTO(NUM_DEPTO) 
	--REGRAS DE NEGÓCIO
-- 	CONSTRAINT EMPREGADO_CONST_NOME UNIQUE(NOME_EMPREGADO),
-- 	CONSTRAINT EMPREGADO_CHECK CHECK (SALARIO > 2000)
);
SELECT * FROM EMPREGADO
-- SELECT * FROM DEPARTAMENTO

-- DDL (CREATE, DROP, ALTER)
-- ADICIONANDO COLUNAS
ALTER TABLE EMPREGADO ADD sexo char;
ALTER TABLE EMPREGADO ADD COLUMN email TEXT CHECK (email <> '');
--REMOVENDO COLUNAS
ALTER TABLE EMPREGADO DROP COLUMN EMAIL;
ALTER TABLE EMPREGADO DROP COLUMN CONTATO;
ALTER TABLE EMPREGADO DROP COLUMN SEXO;
-- ADICIONAR REGRA
ALTER TABLE EMPREGADO ALTER COLUMN SEXO SET NOT NULL;
-- ADICIONANDO COLUNA JA COM VALOR DEFAULT
-- ALTER TABLE EMPREGADO ALTER COLUMN email SET DEFAULT 'nome@nome.com';
-- REMOVER VALOR DEFAULT
ALTER TABLE EMPREGADO ALTER COLUMN EMAIL DROP DEFAULT;
-- MUDAR O TIPO DE DADOS DE UMA COLUNA
ALTER TABLE EMPREGADO ALTER COLUMN SALARIO TYPE REAL;
ALTER TABLE EMPREGADO ALTER COLUMN SALARIO TYPE NUMERIC(10,2);


-- SELECT * FROM EMPREGADO
-- RENOMEAR UMA COLUNA
ALTER TABLE EMPREGADO RENAME COLUMN NOME_EMPREGAGO TO NOME_EMPREGADO;

-- RENOMEAR UMA TABELA
ALTER TABLE EMPREGADO RENAME TO FUNCIONARIOS;
ALTER TABLE FUNCIONARIOS RENAME TO EMPREGADO;


ALTER TABLE EMPREGADO DROP COLUMN SEXO;
ALTER TABLE EMPREGADO DROP COLUMN CONTATO;
ALTER TABLE EMPREGADO DROP COLUMN EMAIL;



-- INSERINDO DADOS EM UM BD SQL
-- CADASTRANDO DEPARTAMENTOS (SELECT * FROM DEPARTAMENTO)


INSERT INTO DEPARTAMENTO (NOME_DEPTO) VALUES 
('FINANCEIRO'),
('ADMINISTRAÇÃO'),
('SUPORTE TÉCNICO'),
('COMPRAS'),
('LOGÍSTICA'),
('PRODUÇÃO'),
('QUALIDADE'),
('RECURSOS HUMANOS'),
('PLANEJAMENTO ESTRATÉGICO'),
('INOVAÇÃO'),
('DESENVOLVIMENTO DE PRODUTO'),
('RELACIONAMENTO COM CLIENTE'),
('GESTÃO DE PROJETOS'),
('COMUNICAÇÃO INTERNA'),
('TREINAMENTO E DESENVOLVIMENTO'),
('TECNOLOGIA DA INFORMAÇÃO'),
('JURÍDICO'),
('AUDITORIA INTERNA'),
('SUSTENTABILIDADE'),



-- CADASTRANDO EMPREGADOS
ALTER TABLE EMPREGADO ADD CONSTRAINT EMPREGADO_CONST_NOME UNIQUE(NOME_EMPREGADO)
	
LTER TABLE DEPARTAMENTO
ADD CONSTRAINT DEP_CONST_NOME UNIQUE (NOME_DEPTO);

-- Insira os novos dados
INSERT INTO DEPARTAMENTO (NOME_DEPTO) VALUES 
('FINANCEIRO'),
('ADMINISTRAÇÃO'),
('SUPORTE TÉCNICO'),
('COMPRAS'),
('LOGÍSTICA'),
('PRODUÇÃO'),
('QUALIDADE'),
('RECURSOS HUMANOS'),
('PLANEJAMENTO ESTRATÉGICO'),
('INOVAÇÃO'),
('DESENVOLVIMENTO DE PRODUTO'),
('RELACIONAMENTO COM CLIENTE'),
('GESTÃO DE PROJETOS'),
('COMUNICAÇÃO INTERNA'),
('TREINAMENTO E DESENVOLVIMENTO'),
('TECNOLOGIA DA INFORMAÇÃO'),
('JURÍDICO'),
('AUDITORIA INTERNA'),
('SUSTENTABILIDADE');

-- Adicione a restrição UNIQUE para EMPREGADO
ALTER TABLE EMPREGADO
ADD CONSTRAINT EMPREGADO_CONST_NOME UNIQUE(NOME_EMPREGADO);

-- Insira os novos dados na tabela EMPREGADO
INSERT INTO EMPREGADO (NOME_EMPREGADO, SALARIO, NUM_DPTO) VALUES
('CARLOS SANTOS', 7500.00, 5),
('MARIA OLIVEIRA', 6400.00, 6),
('FERNANDA SOUZA', 7200.00, 7),
('RODRIGO ALMEIDA', 6100.00, 8),
('ANA LIMA', 6800.00, 9),
('PAULO GOMES', 7100.00, 10),
('JOÃO MENDES', 7300.00, 11),
('CLARA SILVA', 6200.00, 12),
('DANIELA FERREIRA', 6900.00, 13),
('RAFAEL COSTA', 7000.00, 14),
('VIVIANE ARAÚJO', 6700.00, 15),
('GUSTAVO MARTINS', 6800.00, 16),
('MARCOS PEREIRA', 7600.00, 17),
('PATRICIA LOPES', 6500.00, 18),
('RENATO BARBOSA', 7200.00, 19),
('JULIANA CASTRO', 6900.00, 20),
('RICARDO MORAES', 7100.00, 21),
('ISABELA ROCHA', 7000.00, 1),
('PEDRO FONSECA', 6300.00, 2),
('LETÍCIA RAMOS', 6600.00, 3),
('GABRIELA VIEIRA', 6800.00, 4),
('LUCIANO MELO', 7100.00, 5),
('MARTA DIAS', 6400.00, 6),
('JULIO VARGAS', 7500.00, 7),
('ALICE NUNES', 6300.00, 8),
('EDUARDO LIMA', 6600.00, 9),
('SILVIA CAMPOS', 6700.00, 10),
('MARCELA GONÇALVES', 6900.00, 11),
('ANDRÉ SOARES', 7200.00, 12),
('MONICA FREITAS', 6500.00, 13),
('BRUNO FERREIRA', 7100.00, 14),
('CRISTIANO RIBEIRO', 7000.00, 15),
('VITOR COSTA', 6800.00, 16),
('ADRIANA ALVES', 7300.00, 17),
('DIEGO RODRIGUES', 6400.00, 18),
('CAROLINA TEIXEIRA', 6600.00, 19),
('HENRIQUE GARCIA', 6900.00, 20),
('LAURA MIRANDA', 7200.00, 21);

-- Verifique os dados inseridos
SELECT * FROM EMPREGADO;

-- PROJETO (NUM_PROJ, NOME_PROJETO, LUGAR)
CREATE TABLE IF NOT EXISTS PROJETO(
	NUM_PROJ SERIAL NOT NULL,
	NOME_PROJETO VARCHAR(100) NOT NULL,
	CONSTRAINT PROJETO_PK PRIMARY KEY(NUM_PROJ)
);

ALTER TABLE PROJETO ADD COLUMN LUGAR VARCHAR(40) NOT NULL;

-- Inserir projetos na tabela PROJETO
INSERT INTO PROJETO (NOME_PROJETO, LUGAR) VALUES
('Desenvolvimento de Landing Page', 'São Paulo'),
('Criação de Aplicativo Mobile', 'Belo Horizonte'),
('Implementação de E-commerce', 'Curitiba'),
('Reestruturação de Banco de Dados', 'Porto Alegre'),
('Desenvolvimento de API RESTful', 'Florianópolis'),
('Análise de Dados e BI', 'Salvador'),
('Integração de Sistemas', 'Recife'),
('Automação de Processos', 'Brasília'),
('Desenvolvimento de Dashboard', 'Fortaleza'),
('Otimização de SEO', 'Manaus');

-- Selecionar todos os registros da tabela EMPREGADO
SELECT * FROM EMPREGADO;




CREATE TABLE IF NOT EXISTS TRABALHA(
MAT_EMPREGADO INT,
NUM_PROJETO INT,
HORAS VARCHAR(10),
CONSTRAINT TRABALHA_EMP_PROJ_PK PRIMARY KEY
(MAT_EMPREGADO, NUM_PROJETO),
CONSTRAINT TRABALHA_EMPREGADO_FK FOREIGN KEY (MAT_EMPREGADO) REFERENCES EMPREGADO (MATRICULA),
CONSTRAINT TRABALHA_PROJETO_FK FOREIGN KEY (NUM_PROJETO)
REFERENCES PROJETO (NUM_PROJ)
);
INSERT INTO TRABALHA (MAT_EMPREGADO, NUM_PROJETO, HORAS) VALUES
(3, 1, 40),
(20, 2, 60),
(14, 8, 5),
(7, 10, 300),
(9, 4, 70),
(11, 7, 60)

---DEPENDENTE





--EXTRAÇÃO DE DADOS (SELECT)
-- PROJEÇÃO

-- SELECT <LISTA DE ATRIBUTOS> FROM <TABELA>
-- SELECT * FROM EMPREGADO
-- SELECT matricula, nome_empregado FROM EMPREGADO
-- SELECT nome_empregado, salario FROM EMPREGADO

-- CLÁUSULA WHERE
-- SELECT <LISTA DE ATRIBUTOS> FROM <TABELA> WHERE <CONDIÇÃO>

-- OPERADORES RELACIONAIS 
-- <> OU !=     DIFERENTE
-- >, <, =, >=, <=

-- OPERADORES LÓGICOS
-- AND, OR, NOT

--- LISTAR NOME, SALARIO DOS EMPREGADOS DO DEPTO 03
SELECT NOME_EMPREGADO, SALARIO 
	FROM EMPREGADO 
		WHERE NUM_DEPTO = 3
			LIMIT 5
--- LISTAR NOME, SALARIO DOS EMPREGADOS DO DEPTO 03 QUE GANHAM ACIMA
-- DE 5000
SELECT NOME_EMPREGADO, SALARIO 
	FROM EMPREGADO 
		WHERE NUM_DEPTO = 3 AND SALARIO >= 5000
			LIMIT 5
-- LISTAR OS EMPREGADOS COM SALARIO ENTRE 2000 E 5000

SELECT NOME_EMPREGADO, SALARIO 
	FROM EMPREGADO 
		WHERE SALARIO >= 2000 AND SALARIO <= 5000

-- BETWEEN e NOT BETWEEN
SELECT NOME_EMPREGADO, SALARIO 
	FROM EMPREGADO 
		WHERE SALARIO NOT BETWEEN 2000 AND 5000

-- LISTAR TODOS OS EMPREGADOS QUE TEM O PRIMEIRO NOME MARIA.
-- LIKE ou NOT LIKE
SELECT * FROM EMPREGADO 
	WHERE NOME_EMPREGADO LIKE '%gomes%';
	
	
-- CLÁUSULAS ORDER BY
SELECT * FROM EMPREGADO 
	ORDER BY  SALARIO, NOME_EMPREGADO ASC;
	
-- CÁLCULO NA CLÁUSULA SELECT
--- MOSTRAR O NOME, SALARIO DOS EMPREGADOS COM AJUSTES DE 40% PARA 
--- OS QUE GANHAM ABAIXO DE 5000
SELECT NOME_EMPREGADO, SALARIO AS SALARIO_ANTIGO, 
(SALARIO * 1.4) AS NOVO_SALARIO
	FROM EMPREGADO WHERE SALARIO <= 5000 AND NUM_DEPTO = 1

-- FUNÇÕES DE AGREGAÇÃO
-- Mostrar o valor do maior salario dos empregados
-- AVG (MEDIA)
-- MIN, MAX, COUNT, SUM

SELECT * FROM EMPREGADO WHERE
SALARIO IN (SELECT MAX(SALARIO) FROM EMPREGADO);

-- QUANTOS EMPREGADOS GANHAM MAIS QUE 8000
SELECT COUNT(*) FROM EMPREGADO WHERE SALARIO >= 8000

-- QUAIS OS DIFERENTES SALARIOS PAGOS PELA EMPRESA
SELECT DISTINCT(SALARIO) FROM EMPREGADO






















);





















